背景提出：
    1.微服务是一种架构风格
    2.一个大应用应该拆分成一组小应用
    3.每个服务运行在自己的进程内，可以独立部署和开发
    4.服务之间使用轻量级的http交互【】
    5.服务围绕业务功能拆分
    6.可通过全自动部署机制自动部署
    7.去中心化，服务自治，各个服务可以使用不同的语言开发，不同的存储技术

微服务带来的分布式问题：
    1.远程调用：使用什么方式进行调用【http,dubbo协议或其他？】
    2.服务发现：如何确定调用的服务是正常的
    3.负载均衡：流量如何分发
    4.服务容错：调用不通、网络不通怎么处理
    5.配置管理：配置中心管理所有配置
    6.服务监控：所有服务运行状态监控
    7.链路追踪：调用链，用于排查调度异常
    8.日志管理：管理日志
    9.任务调度：并行任务还是单机调用任务

分布式解决：springboot + spring cloud

部署应用：cloud native
    云服务部署的问题：
    1.服务自愈：如果一台服务器上的应用异常导致无法调用，甚至是宕机了，那么能否在另一个服务器上启动一个应用
    2.弹性收缩：高峰期间应用能否自动扩充【多个服务器上再多部署】
    3.服务隔离：同一台服务器如果存在多个服务，那么服务之间不能相互影响，比如一个应用异常不能导致另一个服务异常
    4.自动部署：服务很多，自动部署方便快捷无误
    5.灰度发布：版本发布、切换
    6.流量治理：流量分流
    云服务部署解决：
    Docker+Kubernetes。。。